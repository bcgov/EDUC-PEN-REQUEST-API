pipeline{
   agent any
   environment{
      extJSHelper = '';
      DEBUG_OUTPUT = 'false'

      NAMESPACE='mvubjx'
      TOOLS = "${NAMESPACE}-tools"
      DEV = "${NAMESPACE}-dev"

      APP_NAME = 'pen-request-api'
      REPO_NAME = "educ-${APP_NAME}"
      OWNER = 'bcgov'
      JOB_NAME = 'master'
      TAG = 'latest'
      TARGET_ENV = 'dev'
      STAGING_ENV = 'Dev'
      TARGET_ENVIRONMENT = "${NAMESPACE}-${TARGET_ENV}"
      TESTS_REPO_NAME = "${REPO_NAME}"

      APP_DOMAIN = 'pathfinder.gov.bc.ca'
      SOURCE_REPO_REF = 'master'
      SOURCE_REPO_URL = 'https://github.com/${OWNER}/${REPO_NAME}.git'
      DC_URL = "https://raw.githubusercontent.com/${OWNER}/${REPO_NAME}/master/tools/openshift/api.dc.yaml"
      MIN_REPLICAS = "1"
      MAX_REPLICAS = "1"
      MIN_CPU = "30m"
      MAX_CPU = "300m"
      MIN_MEM = "650Mi"
      MAX_MEM = "750Mi"
  }
  stages{
    stage('Initialize') {
      steps {
        script {
          if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
            // Force OpenShift Plugin directives to be verbose
            openshift.logLevel(1)

            // Print all environment variables
            echo 'DEBUG - All pipeline environment variables:'
            echo sh(returnStdout: true, script: 'env')
          }

          sh "wget -O - https://raw.githubusercontent.com/bcgov/EDUC-INFRA-COMMON/master/openshift/common-deployment/deployHelpers.js > deployHelpers.js"
          extJSHelper = evaluate readFile('deployHelpers.js')
        }
      }
    }
    // stage('Build App') {
    //   steps {
    //     script {
    //       openshift.withCluster() {
    //         openshift.withProject(TOOLS) {
    //           try {
    //             echo "Building API..."
    //             def bcBackend = openshift.process('-f', 'tools/openshift/api.bc.yaml', "REPO_NAME=${REPO_NAME}-${JOB_NAME}", "JOB_NAME=${JOB_NAME}", "SOURCE_REPO_URL=${SOURCE_REPO_URL}", "SOURCE_REPO_REF=${SOURCE_REPO_REF}")
    //             openshift.apply(bcBackend).narrow('bc').startBuild('-w').logs('-f')

    //             openshift.tag("${REPO_NAME}-${JOB_NAME}:latest", "${REPO_NAME}-${JOB_NAME}:${JOB_NAME}")
    //           } catch (e) {
    //             echo "API build failed"
    //             throw e
    //           }
    //         }
    //       }
    //     }
    //   }
    //   post {
    //     success {
    //       echo 'Cleanup BuildConfigs'
    //       script {
    //           openshift.withCluster() {
    //             openshift.withProject(TOOLS) {
    //               def bcApi = openshift.selector('bc', "${REPO_NAME}-${JOB_NAME}")

    //               if(bcApi.exists()) {
    //                   echo "Removing BuildConfig ${REPO_NAME}-${JOB_NAME}"
    //                   bcApi.delete()
    //               }
    //             }
    //           }
    //         }
    //     }
    //     failure {
    //       echo 'Build stage failed'
    //     }
    //   }
    // }
	  // stage('Promote and configure DEV') {
    //   steps{
    //     script{
    //         extJSHelper.performApiDeploy(STAGING_ENV, TARGET_ENVIRONMENT, REPO_NAME, APP_NAME, JOB_NAME, TAG, TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN, DC_URL, MIN_REPLICAS, MAX_REPLICAS, MIN_CPU, MAX_CPU, MIN_MEM, MAX_MEM, TARGET_ENV, NAMESPACE)
    //     }
    //   }
    //   post{
    //     success{
    //       echo 'Deployment to Dev was successful'
    //     }
    //     failure{
    //       echo 'Deployment to Dev failed'
    //     }
    //   }
    // }
    stage('Integration Test') {
      steps {
        script {
          withCredentials([string(credentialsId: "${TOOLS}-github-actions-token", variable: 'TOKEN')]) {
            def clientSecret = sh( script: "bash ./get-clientsecret.sh", returnStdout: true).trim()
            def encryptHelper = evaluate readFile('encrypt.groovy')
            def (publicKeyId, publicKey) = getRepoPublicKey(TOKEN)
            saveSecret(TOKEN, 'SOAM_DISCOVERY_URL', publicKeyId, encryptHelper.encrypt("https://${TARGET_ENVIRONMENT}.pathfinder.gov.bc.ca/auth/realms/master/.well-known/openid-configuration", publicKey))
            saveSecret(TOKEN, 'SOAM_CLIENT_ID', publicKeyId, encryptHelper.encrypt("${APP_NAME}-it", publicKey))
            saveSecret(TOKEN, 'SOAM_CLIENT_SECRET', publicKeyId, encryptHelper.encrypt(clientSecret, publicKey))
            saveSecret(TOKEN, 'API_URL', publicKeyId, encryptHelper.encrypt("https://${APP_NAME}-${TARGET_ENVIRONMENT}.pathfinder.gov.bc.ca", publicKey))
            extJSHelper.triggerWorkflow(TOKEN, 'integration-test')
            extJSHelper.waitForWorkflowRunComplete(TOKEN)
          }
        }
      }
    }
  }
}

def getRepoPublicKey(String token) {
  def response = httpRequest customHeaders: [[name: 'Authorization', value: "token ${token}"], [name: 'Accept', value: "application/vnd.github.ant-man-preview+json"]], url: "https://api.github.com/repos/${OWNER}/${TESTS_REPO_NAME}/actions/secrets/public-key"
  echo "getRepoPublicKey Status: ${response.status}"
  //echo "Content: ${response.content}"
  def jsonObj = readJSON text: response.content
  [jsonObj.key_id ,jsonObj.key]
}


def saveSecret(String token, String name, String publicKeyId, String secret) {
  def dispatchRequest = """
    {
      "key_id": "${publicKeyId}",
      "encrypted_value": "${secret}"
    }
  """
  def response = httpRequest customHeaders: [[name: 'Authorization', value: "token ${token}"], [name: 'Accept', value: "application/vnd.github.ant-man-preview+json"]], contentType: 'APPLICATION_JSON', httpMode: 'PUT', requestBody: dispatchRequest, url: "https://api.github.com/repos/${OWNER}/${TESTS_REPO_NAME}/actions/secrets/${name}"
  echo "saveSecret Status: ${response.status}"
  echo "saved a secret in Github Actions!"
}
